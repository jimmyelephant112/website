(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{489:function(e,t,o){"use strict";o.r(t);var s=o(1),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"contributing"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#contributing"}},[e._v("#")]),e._v(" Contributing")]),e._v(" "),o("h2",{attrs:{id:"general-guideline"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#general-guideline"}},[e._v("#")]),e._v(" General Guideline")]),e._v(" "),o("p",[e._v("We use Github as a code and issues hosting platform. To report a bug or propose a new feature, please open an issue. For pull requests, we would ask you initially create an issue and then create a pull requests linked to this issue.")]),e._v(" "),o("h2",{attrs:{id:"docs-contribution"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docs-contribution"}},[e._v("#")]),e._v(" Docs Contribution")]),e._v(" "),o("p",[e._v("We use a flexible documentation system as the docs are generated from:")]),e._v(" "),o("ul",[o("li",[e._v("notebooks containing high-level guides stored in "),o("a",{attrs:{href:"https://drive.google.com/drive/folders/1boOu13YdhGkPOYiKe6KBkRmkYaaBbcsH?usp=sharing",target:"_blank",rel:"noopener noreferrer"}},[e._v("Google Colab"),o("OutboundLink")],1)]),e._v(" "),o("li",[e._v("source code and markdown documents within the repository")])]),e._v(" "),o("p",[e._v("The simplest way to contribute to the guides is by leaving comments on a Google Colab document from the directory mentioned above. If you’d like to work with text files, you can contribute to the "),o("code",[e._v("docs/target")]),e._v(" directory containing the built documentation. It’s OK to propose changes to generated files in the "),o("code",[e._v("docs/target")]),e._v(" directory as we will move the changes to the corresponding Google Colab.")]),e._v(" "),o("p",[e._v("To contribute to other types of documentation, please check to the corresponding "),o("code",[e._v("docs/name.py")]),e._v(" file to understand the source of a document. Most of the documents outside of Google Colab are stored in the root directory of the repository; other documents are generated from the source code i.e., references.")]),e._v(" "),o("h3",{attrs:{id:"building-process"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#building-process"}},[e._v("#")]),e._v(" Building Process")]),e._v(" "),o("p",[e._v("In the "),o("code",[e._v("docs")]),e._v(" directory we have two directories:")]),e._v(" "),o("ul",[o("li",[e._v("data sources like Jinja2 templates: "),o("code",[e._v("docs/source")])]),e._v(" "),o("li",[e._v("directory for generated documentation: "),o("code",[e._v("docs/target")])])]),e._v(" "),o("p",[e._v("In the "),o("code",[e._v("docs")]),e._v(" directory we have python scripts using:")]),e._v(" "),o("ul",[o("li",[e._v("function to convert a Google Colab: "),o("code",[e._v("scripts.docs.from_notebook")])]),e._v(" "),o("li",[e._v("function to copy documents: "),o("code",[e._v("scripts.docs.from_markdown")])]),e._v(" "),o("li",[e._v("arbitrary scripts generating e.g., references")])]),e._v(" "),o("p",[e._v("Every Python script in the "),o("code",[e._v("docs")]),e._v(" directory generates one on more articles to the "),o("code",[e._v("docs/target")]),e._v(" directory. You can run "),o("code",[e._v("make docs")]),e._v(" to build documentation after you have set up a development environment as it’s described in the next section.")]),e._v(" "),o("h2",{attrs:{id:"code-contribution"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#code-contribution"}},[e._v("#")]),e._v(" Code Contribution")]),e._v(" "),o("p",[e._v("Frictionless is a Python3.6+ framework, and it uses some basically standard Python tools for the development process:")]),e._v(" "),o("ul",[o("li",[e._v("testing: "),o("code",[e._v("pytest")])]),e._v(" "),o("li",[e._v("linting: "),o("code",[e._v("pylama")])]),e._v(" "),o("li",[e._v("formatting: "),o("code",[e._v("black")])]),e._v(" "),o("li",[e._v("type checking: "),o("code",[e._v("mypy")]),e._v(" (under construction)")])]),e._v(" "),o("p",[e._v("It’s a commonplace but, of course, you need "),o("code",[e._v("git")]),e._v(" to work on the project, also "),o("code",[e._v("make")]),e._v(" is recommended.")]),e._v(" "),o("h3",{attrs:{id:"development-environment"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#development-environment"}},[e._v("#")]),e._v(" Development Environment")]),e._v(" "),o("p",[e._v("After cloning the repository, it’s recommended to create a virtual environment and install the dependencies:")]),e._v(" "),o("blockquote",[o("p",[e._v("it will install a "),o("code",[e._v("git commit")]),e._v(" hook running the tests")])]),e._v(" "),o("div",{staticClass:"language-bash extra-class"},[o("pre",{pre:!0,attrs:{class:"language-bash"}},[o("code",[e._v("python3.8 -m venv .python\n"),o("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" .python/bin/activate\npip "),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" wheel\n"),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("alias")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"frictionless=python -m frictionless"')]),e._v("\n")])])]),o("p",[e._v("Then you can run various make commands:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("make docs")]),e._v(" - build the docs")]),e._v(" "),o("li",[o("code",[e._v("make format")]),e._v(" - format source code")]),e._v(" "),o("li",[o("code",[e._v("make install")]),e._v(" - install the dependencies (we did before)")]),e._v(" "),o("li",[o("code",[e._v("make lint")]),e._v(" - lint the project")]),e._v(" "),o("li",[o("code",[e._v("make release")]),e._v(" - release a new version")]),e._v(" "),o("li",[o("code",[e._v("make test")]),e._v(" - run the tests")]),e._v(" "),o("li",[o("code",[e._v("make test-ci")]),e._v(" - run the tests (including integrational)")])]),e._v(" "),o("p",[e._v("Of course, it’s possible and recommended to run underlying commands like "),o("code",[e._v("pytest")]),e._v(" or "),o("code",[e._v("pylama")]),e._v(" to speed up the development process.")]),e._v(" "),o("h2",{attrs:{id:"release-process"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#release-process"}},[e._v("#")]),e._v(" Release Process")]),e._v(" "),o("p",[e._v("To release a new version:")]),e._v(" "),o("ul",[o("li",[e._v("check that you have push access to the "),o("code",[e._v("master")]),e._v(" branch")]),e._v(" "),o("li",[e._v("update "),o("code",[e._v("frictionless/assets/VERSION")]),e._v(" following the SemVer standard")]),e._v(" "),o("li",[e._v("add changes to "),o("code",[e._v("CHANGELOG.md")]),e._v(" if it’s not a patch release (major or micro)")]),e._v(" "),o("li",[e._v("run "),o("code",[e._v("make release")]),e._v(" which create a release commit and tag and push it to Github")]),e._v(" "),o("li",[e._v("an actual release will happen on the Travis CI platform after running the tests")])])])}),[],!1,null,null,null);t.default=n.exports}}]);